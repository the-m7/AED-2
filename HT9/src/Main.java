import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {

        char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f' }; 
        int[] charfreq = { 5, 9, 12, 13, 16, 45 }; 
    
        HuffmanTree huff = new HuffmanTree(charArray, charfreq);

        //System.out.println(huff.root.toString());
        printCode(huff.root, "");

        ArrayList<HuffmanNode> Lista = new ArrayList<HuffmanNode>();

        Lista = completeTree(Lista, huff.root, 0);

        System.out.println(Lista.toString());

        //System.out.println("termino");
    }
    
    public static void printCode(HuffmanNode root, String s) 
    { 
  
        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.left == null && root.right == null
            && Character.isLetter(root.c)) { 
  
            // c is the character in the node 
            System.out.println(root.c + ":" + s); 
  
            return; 
        } 
  
        // if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 
  
        // recursive calls for left and 
        // right sub-tree of the generated tree. 
        printCode(root.left, s + "0"); 
        printCode(root.right, s + "1"); 
    }

    private static int left(int i) {
        return 2*i + 1;
    }
    private static int right(int i) {
        return 2*i + 2;
    }
    private static int parent(int i) {
        return (i-1)/2;
    }

    public static ArrayList<HuffmanNode> completeTree(ArrayList<HuffmanNode> Lista, HuffmanNode root, int id){

        Lista.add(id, root);

        if(root.left!=null){
            completeTree(Lista, root.left, 2*id + 1);
        }
        if(root.right!=null){
            completeTree(Lista, root.right, 2*id+2);
        }

        return Lista;
        
    }
}
